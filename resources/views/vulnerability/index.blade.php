<x-layouts.app>
    <div class="min-h-screen bg-gradient-to-br from-dark-bg to-dark-surface">
        <div class="max-w-[90rem] mx-auto p-6">
            <!-- Header & Form Combined -->
            <div class="card bg-dark-surface border-dark-border mb-6">
                <div class="p-8 pb-0">
                    <h1 class="text-3xl font-bold bg-gradient-to-r from-blue-500 to-blue-300 bg-clip-text text-transparent">Advanced Vulnerability Scanner</h1>
                    <p class="text-dark-text-secondary mt-2">Comprehensive security analysis based on OWASP Top 10 and CVE database</p>
                </div>

                <form id="scanForm" class="p-8 pt-6" method="POST" action="{{ route('vulnerability.scan') }}">
                    @csrf
                    <div class="grid md:grid-cols-2 gap-6">
                        <div class="w-full">
                            <label for="target_url" class="form-label">Target URL</label>
                            <input type="url" id="target_url" name="target_url" required
                                class="form-input w-full"
                                placeholder="https://example.com">
                        </div>
                        <div class="flex space-x-4 w-full">
                            <div class="flex-1">
                                <label for="scan_type" class="form-label">Scan Type</label>
                                <select id="scan_type" name="scan_type" required class="form-select w-full">
                                    <option value="quick">Quick Scan (Basic Checks)</option>
                                    <option value="full">Full Scan (Comprehensive)</option>
                                    <option value="penetration">Penetration Test</option>
                                </select>
                            </div>
                            <div class="flex items-end">
                                <button type="submit" disabled
                                    class="btn-primary px-5 py-2.5 flex items-center justify-center font-medium shadow-lg shadow-blue-500/20 hover:shadow-blue-600/30">
                                    <span id="buttonText">Start Scan</span>
                                    <svg id="loadingIcon" class="hidden animate-spin ml-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Results Section -->
            <div id="resultsSection" class="hidden">
                <div class="grid grid-cols-12 gap-6">
                    <!-- Left Column: Summary -->
                    <div class="col-span-12 lg:col-span-4 space-y-6">
                        <!-- Scan Info Card -->
                        <div class="card bg-dark-surface border-dark-border">
                            <div class="flex items-center justify-between mb-4">
                                <h2 class="text-lg font-semibold text-dark-text">Scan Information</h2>
                                <span class="px-3 py-1 bg-blue-500/10 text-blue-400 rounded-full text-sm">Active</span>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <p class="text-dark-text-secondary text-sm">Target URL</p>
                                    <p id="targetUrl" class="text-dark-text text-sm font-mono break-all"></p>
                                </div>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <p class="text-dark-text-secondary text-sm">Scan ID</p>
                                        <p id="scanId" class="text-dark-text text-sm font-mono"></p>
                                    </div>
                                    <div>
                                        <p class="text-dark-text-secondary text-sm">Duration</p>
                                        <p id="scanDuration" class="text-dark-text text-sm"></p>
                                    </div>
                                </div>
                                <div>
                                    <p class="text-dark-text-secondary text-sm">Scan Type</p>
                                    <p id="scanType" class="text-dark-text text-sm capitalize"></p>
                                </div>
                            </div>
                        </div>

                        <!-- Risk Summary -->
                        <div class="card bg-dark-surface border-dark-border">
                            <h2 class="text-lg font-semibold text-dark-text mb-4">Risk Summary</h2>
                            <div class="space-y-4">
                                <div class="flex items-center justify-between p-3 bg-dark-surface-2 rounded-xl">
                                    <div class="flex items-center">
                                        <span class="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                                        <span class="text-dark-text">High Risk</span>
                                    </div>
                                    <span id="highRisk" class="text-red-500 font-semibold">0</span>
                                </div>
                                <div class="flex items-center justify-between p-3 bg-dark-surface-2 rounded-xl">
                                    <div class="flex items-center">
                                        <span class="w-2 h-2 bg-yellow-500 rounded-full mr-2"></span>
                                        <span class="text-dark-text">Medium Risk</span>
                                    </div>
                                    <span id="mediumRisk" class="text-yellow-500 font-semibold">0</span>
                                </div>
                                <div class="flex items-center justify-between p-3 bg-dark-surface-2 rounded-xl">
                                    <div class="flex items-center">
                                        <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                                        <span class="text-dark-text">Low Risk</span>
                                    </div>
                                    <span id="lowRisk" class="text-green-500 font-semibold">0</span>
                                </div>
                            </div>
                        </div>

                        <!-- Compliance Status -->
                        <div class="card bg-dark-surface border-dark-border">
                            <h2 class="text-lg font-semibold text-dark-text mb-4">Compliance Status</h2>
                            <div class="space-y-3">
                                <div class="flex items-center justify-between">
                                    <span class="text-dark-text-secondary">OWASP Top 10</span>
                                    <span id="owaspStatus" class="badge-success">Compliant</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-dark-text-secondary">PCI DSS</span>
                                    <span id="pciStatus" class="badge-warning">Review Required</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-dark-text-secondary">GDPR</span>
                                    <span id="gdprStatus" class="badge-success">Compliant</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column: Detailed Results -->
                    <div class="col-span-12 lg:col-span-8 space-y-6">
                        <!-- Vulnerabilities List -->
                        <div class="card bg-dark-surface border-dark-border">
                            <div class="p-6 border-b border-dark-border">
                                <h2 class="text-xl font-semibold text-dark-text">Vulnerabilities Found</h2>
                            </div>
                            <div id="vulnerabilitiesList" class="p-6">
                                <!-- Vulnerabilities will be populated here -->
                            </div>
                        </div>

                        <!-- Executive Summary -->
                        <div class="card bg-dark-surface border-dark-border">
                            <h2 class="text-lg font-semibold text-dark-text mb-4">Executive Summary</h2>
                            <div id="executiveSummary" class="space-y-4">
                                <!-- Executive summary will be populated here -->
                            </div>
                        </div>

                        <!-- Remediation Plan -->
                        <div class="card bg-dark-surface border-dark-border">
                            <h2 class="text-lg font-semibold text-dark-text mb-4">Remediation Plan</h2>
                            <div id="remediationPlan" class="space-y-4">
                                <!-- Remediation plan will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Progress Section -->
            <div id="progressSection" class="hidden">
                <div class="card bg-dark-surface border-dark-border text-center">
                    <div class="p-8">
                        <div class="mb-4">
                            <div class="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
                        </div>
                        <h3 class="text-lg font-semibold text-dark-text mb-2">Scanning in Progress</h3>
                        <p id="progressMessage" class="text-dark-text-secondary">Initializing scan...</p>
                        <div class="mt-4">
                            <div class="w-full bg-dark-surface-2 rounded-full h-2">
                                <div id="progressBar" class="bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                            <p id="progressPercentage" class="text-dark-text-secondary mt-2">0%</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <template id="vulnerabilityTemplate">
        <div class="vulnerability-card bg-neutral-700/30 rounded-xl overflow-hidden hover:bg-neutral-700/40 transition-colors duration-200">
            <div class="p-4 flex items-start justify-between">
                <div class="space-y-1 flex-1">
                    <div class="flex items-center space-x-3">
                        <h3 class="text-lg font-semibold text-white vulnerability-type"></h3>
                        <span class="vulnerability-severity px-2.5 py-1 rounded-full text-xs font-medium"></span>
                        <span class="vulnerability-owasp bg-blue-500/20 text-blue-300 px-2.5 py-1 rounded-full text-xs"></span>
                    </div>
                    <p class="text-sm text-neutral-400 vulnerability-location font-mono"></p>
                </div>
                <button class="toggle-details ml-4 p-2 hover:bg-neutral-600/30 rounded-lg transition-colors duration-200">
                    <svg class="w-5 h-5 text-neutral-400 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                    </svg>
                </button>
            </div>
            <div class="vulnerability-details hidden border-t border-neutral-600/30">
                <div class="p-4 space-y-4">
                    <div>
                        <h4 class="text-sm font-medium text-neutral-400 mb-2">Description</h4>
                        <p class="text-white vulnerability-description"></p>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="vulnerability-exploitation-section">
                            <h4 class="text-sm font-medium text-neutral-400 mb-2">Exploitation Methods</h4>
                            <ul class="vulnerability-exploitation-methods list-disc list-inside text-white space-y-1 text-sm"></ul>
                        </div>

                        <div>
                            <h4 class="text-sm font-medium text-neutral-400 mb-2">Mitigation Steps</h4>
                            <ul class="vulnerability-mitigation-steps list-disc list-inside text-white space-y-1 text-sm"></ul>
                        </div>
                    </div>

                    <div class="vulnerability-references-section">
                        <h4 class="text-sm font-medium text-neutral-400 mb-2">References</h4>
                        <ul class="vulnerability-references list-disc list-inside text-blue-400 space-y-1 text-sm"></ul>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('scanForm');
            const loadingIcon = document.getElementById('loadingIcon');
            const buttonText = document.getElementById('buttonText');
            
            // Función para alternar los detalles de vulnerabilidad
            function setupVulnerabilityToggles() {
                document.querySelectorAll('.toggle-details').forEach(button => {
                    button.addEventListener('click', function(e) {
                        e.preventDefault();
                        const vulnerabilityCard = this.closest('.vulnerability-card');
                        const details = vulnerabilityCard.querySelector('.vulnerability-details');
                        const icon = this.querySelector('svg');
                        
                        if (details.classList.contains('hidden')) {
                            details.classList.remove('hidden');
                            icon.style.transform = 'rotate(180deg)';
                        } else {
                            details.classList.add('hidden');
                            icon.style.transform = 'rotate(0)';
                        }
                    });
                });
            }

            if (!form) {
                console.error('Form not found');
                return;
            }

            // Enable the submit button when JS is ready
            const submitBtn = form.querySelector('button[type=submit]');
            if (submitBtn) submitBtn.disabled = false;

            form.addEventListener('submit', async function(e) {
                e.preventDefault();

                // Show loading state immediately
                loadingIcon.classList.remove('hidden');
                buttonText.textContent = 'Starting scan...';
                form.querySelector('button').disabled = true;

                // Show results section with loading state
                const resultsSection = document.getElementById('resultsSection');
                if (resultsSection) {
                    resultsSection.classList.remove('hidden');
                }

                // Initialize scan info
                const scanIdEl = document.getElementById('scanId');
                const targetUrlEl = document.getElementById('targetUrl');
                const scanDurationEl = document.getElementById('scanDuration');
                const scanTypeEl = document.getElementById('scanType');
                const vulnerabilitiesList = document.getElementById('vulnerabilitiesList');

                if (targetUrlEl) targetUrlEl.textContent = form.querySelector('#target_url').value;
                if (scanDurationEl) scanDurationEl.textContent = 'In progress...';
                if (scanTypeEl) scanTypeEl.textContent = form.querySelector('#scan_type').value;
                if (vulnerabilitiesList) {
                    vulnerabilitiesList.innerHTML = `
                        <div class="flex items-center justify-center p-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                            <span class="ml-3 text-white">Scanning target...</span>
                        </div>
                    `;
                }

                try {
                    const formData = new FormData(form);
                    const csrfToken = form.querySelector('input[name="_token"]').value;

                    if (!csrfToken) {
                        throw new Error('CSRF token not found');
                    }

                    // Asegurarnos de que la URL sea absoluta
                    const url = new URL(form.action, window.location.origin).href;

                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-TOKEN': csrfToken
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify({
                            target_url: formData.get('target_url'),
                            scan_type: formData.get('scan_type'),
                            _token: csrfToken
                        })
                    });

                    // Intentar parsear la respuesta como JSON
                    let data;
                    try {
                        data = await response.json();
                    } catch (e) {
                        console.error('Error parsing response:', e);
                        throw new Error('Invalid response from server');
                    }

                    // Verificar si hay error en la respuesta
                    if (!response.ok || data.error) {
                        throw new Error(data.error || `HTTP error! status: ${response.status}`);
                    }

                    // Check if scan is queued
                    if (data.status === 'queued') {
                        if (scanIdEl) scanIdEl.textContent = data.scan_id;
                        
                        // Start polling for scan status
                        const pollInterval = setInterval(async () => {
                            try {
                                // Construct absolute URL using current location
                                const statusUrl = new URL(`/vulnerability/status/${data.scan_id}`, window.location.origin);
                                
                                const statusResponse = await fetch(statusUrl, {
                                    headers: {
                                        'Accept': 'application/json',
                                        'X-Requested-With': 'XMLHttpRequest',
                                        'X-CSRF-TOKEN': form.querySelector('input[name="_token"]').value
                                    },
                                    credentials: 'same-origin'
                                });
                                
                                if (!statusResponse.ok) {
                                    // If we get a 404, wait a bit and retry
                                    if (statusResponse.status === 404) {
                                        console.warn('Status endpoint not found, retrying...');
                                        return; // Continue polling
                                    }
                                    throw new Error(`HTTP error! status: ${statusResponse.status}`);
                                }

                                const statusData = await statusResponse.json();
                                
                                if (!statusData) {
                                    throw new Error('No data received from status endpoint');
                                }

                                // Update UI with current status
                                updateUIWithResults({
                                    ...statusData,
                                    scan_id: data.scan_id,
                                    target_url: data.target_url,
                                    scan_type: data.scan_type
                                });
                                
                                // Handle different status cases
                                switch (statusData.status) {
                                    case 'completed':
                                        clearInterval(pollInterval);
                                        loadingIcon.classList.add('hidden');
                                        buttonText.textContent = 'Start Scan';
                                        form.querySelector('button').disabled = false;
                                        break;
                                    case 'failed':
                                        clearInterval(pollInterval);
                                        loadingIcon.classList.add('hidden');
                                        buttonText.textContent = 'Start Scan';
                                        form.querySelector('button').disabled = false;
                                        throw new Error(statusData.message || 'Scan failed');
                                    case 'running':
                                        buttonText.textContent = `Scanning... ${statusData.progress || 0}%`;
                                        break;
                                    default:
                                        console.warn(`Unknown scan status: ${statusData.status}`);
                                }

                                // Show any messages from the backend
                                if (statusData.message) {
                                    console.info(`Scan status: ${statusData.message}`);
                                }

                            } catch (error) {
                                console.error('Status check failed:', error);
                                
                                // Don't clear interval on network errors, allow retrying
                                if (error.message.includes('HTTP error') || error.message.includes('NetworkError')) {
                                    console.warn('Network error, will retry...');
                                    return;
                                }
                                
                                // For other errors, stop polling and reset UI
                                clearInterval(pollInterval);
                                loadingIcon.classList.add('hidden');
                                buttonText.textContent = 'Start Scan';
                                form.querySelector('button').disabled = false;
                                
                                // Show error to user
                                const errorMessage = error.message.includes('Scan failed') 
                                    ? error.message 
                                    : `Error checking scan status: ${error.message}`;
                                alert(errorMessage);
                            }
                        }, 2000); // Poll every 2 seconds

                        return;
                    }

                    // For quick scans or immediate results, update UI directly
                    updateUIWithResults(data);

                } catch (error) {
                    console.error('Error:', error);
                    alert(error.message || 'An error occurred while scanning. Please try again.');
                } finally {
                    loadingIcon.classList.add('hidden');
                    buttonText.textContent = 'Start Scan';
                    form.querySelector('button').disabled = false;
                }
            });

            function updateUIWithResults(data) {
                if (!data) {
                    console.error('No data received in updateUIWithResults');
                    return;
                }

                const scanIdEl = document.getElementById('scanId');
                const targetUrlEl = document.getElementById('targetUrl');
                const scanDurationEl = document.getElementById('scanDuration');
                const scanTypeEl = document.getElementById('scanType');
                const totalIssuesEl = document.getElementById('totalIssues');
                const highRiskEl = document.getElementById('highRisk');
                const mediumRiskEl = document.getElementById('mediumRisk');
                const lowRiskEl = document.getElementById('lowRisk');

                // Check if we're getting status update or final results
                const results = data.results || data;
                
                // Always update these fields with the latest data
                if (scanIdEl) scanIdEl.textContent = data.scan_id || results.scan_id || '';
                if (targetUrlEl) targetUrlEl.textContent = data.target_url || results.target_url || '';
                if (scanTypeEl) scanTypeEl.textContent = data.scan_type || results.scan_type || '';
                
                if (scanDurationEl) {
                    if (results.scan_metadata && results.scan_metadata.scan_duration) {
                        scanDurationEl.textContent = `${results.scan_metadata.scan_duration}s`;
                    } else if (data.elapsed_time) {
                        scanDurationEl.textContent = `${data.elapsed_time}s`;
                    }
                }

                // Update summary counts if available
                if (results && results.summary) {
                    if (totalIssuesEl) totalIssuesEl.textContent = results.summary.total || 0;
                    if (highRiskEl) highRiskEl.textContent = results.summary.high || 0;
                    if (mediumRiskEl) mediumRiskEl.textContent = results.summary.medium || 0;
                    if (lowRiskEl) lowRiskEl.textContent = results.summary.low || 0;
                }

                const vulnerabilitiesList = document.getElementById('vulnerabilitiesList');
                if (!vulnerabilitiesList) return;

                // Handle different states
                if (data.status === 'running') {
                    // Show loading state for in-progress scans
                    vulnerabilitiesList.innerHTML = `
                        <div class="flex items-center justify-center p-8">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                            <span class="ml-3 text-white">Scanning target... ${data.progress || 0}%</span>
                        </div>
                    `;
                    return;
                }

                // Only update vulnerabilities list if we have final results
                if (results && results.vulnerabilities) {
                    vulnerabilitiesList.innerHTML = '';
                    const template = document.getElementById('vulnerabilityTemplate');
                    const resultsSection = document.getElementById('resultsSection');
                    if (resultsSection) resultsSection.classList.remove('hidden');

                    if (Array.isArray(results.vulnerabilities)) {
                        results.vulnerabilities.forEach(vuln => {
                            const clone = template.content.cloneNode(true);

                            clone.querySelector('.vulnerability-type').textContent = vuln.type;
                            clone.querySelector('.vulnerability-location').textContent = vuln.location;
                            clone.querySelector('.vulnerability-description').textContent = vuln.description;

                            const severityElement = clone.querySelector('.vulnerability-severity');
                            severityElement.textContent = vuln.severity.toUpperCase();
                            switch (vuln.severity) {
                                case 'high':
                                    severityElement.classList.add('bg-red-500/20', 'text-red-300');
                                    break;
                                case 'medium':
                                    severityElement.classList.add('bg-yellow-500/20', 'text-yellow-300');
                                    break;
                                case 'low':
                                    severityElement.classList.add('bg-green-500/20', 'text-green-300');
                                    break;
                            }

                            if (vuln.owasp_category) {
                                clone.querySelector('.vulnerability-owasp').textContent = vuln.owasp_category;
                            }

                            const exploitSection = clone.querySelector('.vulnerability-exploitation-section');
                            const exploitList = clone.querySelector('.vulnerability-exploitation-methods');
                            if (vuln.exploitation_methods && vuln.exploitation_methods.length > 0) {
                                vuln.exploitation_methods.forEach(method => {
                                    const li = document.createElement('li');
                                    li.textContent = method;
                                    exploitList.appendChild(li);
                                });
                            } else {
                                exploitSection.classList.add('hidden');
                            }

                            const mitigationList = clone.querySelector('.vulnerability-mitigation-steps');
                            if (vuln.mitigation_steps && vuln.mitigation_steps.length > 0) {
                                vuln.mitigation_steps.forEach(step => {
                                    const li = document.createElement('li');
                                    li.textContent = step;
                                    mitigationList.appendChild(li);
                                });
                            }

                            const referencesSection = clone.querySelector('.vulnerability-references-section');
                            const referencesList = clone.querySelector('.vulnerability-references');
                            if (vuln.references && vuln.references.length > 0) {
                                vuln.references.forEach(ref => {
                                    const li = document.createElement('li');
                                    const a = document.createElement('a');
                                    a.href = ref;
                                    a.target = '_blank';
                                    a.textContent = ref;
                                    a.className = 'hover:text-blue-300 break-all';
                                    li.appendChild(a);
                                    referencesList.appendChild(li);
                                });
                            } else {
                                referencesSection.classList.add('hidden');
                            }

                            vulnerabilitiesList.appendChild(clone);
                        });
                    }
                }

                // Setup vulnerability toggles
                setupVulnerabilityToggles();
            }

            // Initial setup of vulnerability toggles for any existing items
            setupVulnerabilityToggles();
        });
    </script>
</x-layouts.app> 