<?php

namespace App\Http\Controllers;

use App\Services\AdvancedVulnerabilityScanner;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\View\View;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class VulnerabilityController extends Controller
{
    private $scanner;

    public function __construct(AdvancedVulnerabilityScanner $scanner)
    {
        $this->scanner = $scanner;
    }

    public function index(): View
    {
        return view('vulnerability.index');
    }

    public function scan(Request $request): JsonResponse
    {
        if (!$request->ajax()) {
            return response()->json([
                'error' => 'This endpoint only accepts AJAX requests'
            ], 400);
        }

        try {
            \Log::info('Scan request received', $request->all());
            
            // Validar la entrada
            $validated = $request->validate([
                'target_url' => 'required|url',
                'scan_type' => 'required|in:quick,full',
            ]);

            \Log::info('Validation passed', $validated);

            // Realizar el escaneo usando el servicio avanzado
            $results = $this->scanner->scan(
                $validated['target_url'],
                $validated['scan_type']
            );

            \Log::info('Scan completed', $results);

            return response()->json($results);
        } catch (\Exception $e) {
            \Log::error('Scan error', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'error' => 'An error occurred while scanning.',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get the status of a vulnerability scan
     */
    public function status(string $scanId): JsonResponse
    {
        try {
            $status = Cache::get("scan_status:{$scanId}");
            
            if (!$status) {
                return response()->json([
                    'status' => 'failed',
                    'error' => 'Scan not found or expired'
                ], 404);
            }

            return response()->json($status);
            
        } catch (\Exception $e) {
            Log::error('Error checking scan status', [
                'scan_id' => $scanId,
                'error' => $e->getMessage()
            ]);
            
            return response()->json([
                'status' => 'failed',
                'error' => 'Error checking scan status'
            ], 500);
        }
    }
} 