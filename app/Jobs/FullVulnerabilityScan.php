<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use App\Services\AdvancedVulnerabilityScanner;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class FullVulnerabilityScan implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $timeout = 3600; // 1 hour timeout
    public $tries = 1;
    public $maxExceptions = 3;

    protected $url;
    protected $scanId;

    public function __construct(string $url, string $scanId)
    {
        $this->url = $url;
        $this->scanId = $scanId;
    }

    public function handle(AdvancedVulnerabilityScanner $scanner): void
    {
        try {
            Log::info('Starting full vulnerability scan job', [
                'scan_id' => $this->scanId,
                'url' => $this->url
            ]);

            // Store initial status
            $this->updateScanStatus('running', 0, 'Initializing scan...');

            // Perform the full scan
            $results = $scanner->performFullScan($this->url, $this->scanId);

            // Update final status with results
            $this->updateScanStatus('completed', 100, 'Scan completed successfully', $results);

            Log::info('Full vulnerability scan completed', [
                'scan_id' => $this->scanId,
                'vulnerabilities_found' => count($results['vulnerabilities'] ?? [])
            ]);

        } catch (\Exception $e) {
            Log::error('Full vulnerability scan failed', [
                'scan_id' => $this->scanId,
                'url' => $this->url,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            // Get the last known progress
            $currentStatus = Cache::get("scan_status:{$this->scanId}") ?? ['progress' => 0];
            
            $this->updateScanStatus(
                'failed',
                $currentStatus['progress'],
                'Scan failed: ' . $e->getMessage()
            );

            throw $e;
        }
    }

    protected function updateScanStatus(string $status, int $progress, string $message, array $results = null): void
    {
        $statusData = [
            'status' => $status,
            'progress' => $progress,
            'message' => $message,
            'scan_id' => $this->scanId,
            'target_url' => $this->url,
            'elapsed_time' => time() - LARAVEL_START
        ];

        if ($results) {
            $statusData['results'] = $results;
        }

        // Store status with a longer TTL (2 hours)
        Cache::put("scan_status:{$this->scanId}", $statusData, 7200);

        Log::info('Scan status updated', [
            'scan_id' => $this->scanId,
            'status' => $status,
            'progress' => $progress
        ]);
    }

    public function failed(\Throwable $exception): void
    {
        Log::error('Full vulnerability scan job failed', [
            'scan_id' => $this->scanId,
            'url' => $this->url,
            'error' => $exception->getMessage()
        ]);

        $this->updateScanStatus(
            'failed',
            0,
            'Job failed: ' . $exception->getMessage()
        );
    }
} 