<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\VulnerabilityDefinition;

class VulnerabilityDefinitionsSeeder extends Seeder
{
    public function run(): void
    {
        $vulnerabilities = [
            [
                'name' => 'SQL Injection',
                'description' => 'SQL injection is a code injection technique that might destroy your database. It is one of the most common web hacking techniques.',
                'severity' => 'high',
                'cve_ids' => ['CVE-2020-13443', 'CVE-2021-28163'],
                'owasp_category' => 'A03:2021-Injection',
                'exploitation_methods' => [
                    'Basic payload: \' OR \'1\'=\'1',
                    'Time-based: \' OR SLEEP(5)',
                    'Union-based: \' UNION SELECT username,password FROM users--',
                    'Boolean-based: \' OR 1=1--'
                ],
                'mitigation_steps' => [
                    'Use prepared statements',
                    'Implement input validation',
                    'Use ORM',
                    'Apply principle of least privilege'
                ],
                'references' => [
                    'https://owasp.org/www-community/attacks/SQL_Injection',
                    'https://portswigger.net/web-security/sql-injection',
                    'https://www.acunetix.com/websitesecurity/sql-injection/'
                ],
                'detection_patterns' => [
                    '\'.*OR.*\'.*=.*\'',
                    'UNION.*SELECT',
                    'INSERT.*INTO.*SELECT',
                    'SELECT.*FROM.*WHERE'
                ],
                'false_positives' => [
                    'Legitimate SQL in comments or documentation',
                    'SQL-like syntax in regular text'
                ],
                'required_tools' => 'sqlmap, burpsuite',
                'example_payloads' => [
                    "' OR '1'='1",
                    "admin'--",
                    "1'; DROP TABLE users--",
                    "1' UNION SELECT null,version()--"
                ]
            ],
            [
                'name' => 'Cross-Site Scripting (XSS)',
                'description' => 'XSS attacks enable attackers to inject client-side scripts into web pages viewed by other users.',
                'severity' => 'high',
                'cve_ids' => ['CVE-2021-42013', 'CVE-2020-11022'],
                'owasp_category' => 'A03:2021-Injection',
                'exploitation_methods' => [
                    'Reflected XSS through URL parameters',
                    'Stored XSS in database-persisted content',
                    'DOM-based XSS through client-side JavaScript',
                    'Blind XSS in admin panels or logs'
                ],
                'mitigation_steps' => [
                    'Implement Content Security Policy (CSP)',
                    'Use HTML encoding',
                    'Sanitize user input',
                    'Validate input on server side'
                ],
                'references' => [
                    'https://owasp.org/www-community/attacks/xss/',
                    'https://portswigger.net/web-security/cross-site-scripting',
                    'https://www.acunetix.com/websitesecurity/cross-site-scripting/'
                ],
                'detection_patterns' => [
                    '<script.*>.*</script>',
                    'javascript:.*\(',
                    'onerror=.*\(',
                    'onload=.*\('
                ],
                'false_positives' => [
                    'Code examples in documentation',
                    'Legitimate JavaScript in content'
                ],
                'required_tools' => 'xsshunter, burpsuite',
                'example_payloads' => [
                    "<script>alert('XSS')</script>",
                    "<img src=x onerror=alert('XSS')>",
                    "<svg onload=alert('XSS')>",
                    "javascript:alert('XSS')"
                ]
            ],
            [
                'name' => 'Insecure Direct Object References (IDOR)',
                'description' => 'IDOR occurs when an application provides direct access to objects based on user-supplied input.',
                'severity' => 'high',
                'cve_ids' => ['CVE-2021-28164', 'CVE-2020-35476'],
                'owasp_category' => 'A01:2021-Broken Access Control',
                'exploitation_methods' => [
                    'Manipulating ID parameters in URLs',
                    'Modifying API endpoints',
                    'Changing hidden form fields',
                    'Intercepting and modifying requests'
                ],
                'mitigation_steps' => [
                    'Implement proper access controls',
                    'Use indirect references',
                    'Validate user permissions',
                    'Implement proper session management'
                ],
                'references' => [
                    'https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References',
                    'https://portswigger.net/web-security/access-control/idor'
                ],
                'detection_patterns' => [
                    '/api/user/\d+',
                    '/profile/\d+',
                    '/download/\d+',
                    '/document/\d+'
                ],
                'false_positives' => [
                    'Legitimate sequential IDs in URLs',
                    'Numeric parameters for pagination'
                ],
                'required_tools' => 'burpsuite, postman',
                'example_payloads' => [
                    "/api/user/2 (when logged in as user 1)",
                    "/download/123 (accessing others' files)",
                    "/profile/admin (accessing admin profile)",
                    "?document_id=restricted_doc"
                ]
            ],
            [
                'name' => 'Security Misconfiguration',
                'description' => 'Security misconfiguration occurs when security settings are defined, implemented, or maintained incorrectly.',
                'severity' => 'high',
                'cve_ids' => ['CVE-2021-44228', 'CVE-2021-45046'],
                'owasp_category' => 'A05:2021-Security Misconfiguration',
                'exploitation_methods' => [
                    'Default credentials usage',
                    'Directory listing enabled',
                    'Unnecessary features enabled',
                    'Error messages with stack traces'
                ],
                'mitigation_steps' => [
                    'Implement security headers',
                    'Remove default credentials',
                    'Disable directory listing',
                    'Use proper error handling'
                ],
                'references' => [
                    'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration',
                    'https://www.acunetix.com/websitesecurity/security-misconfiguration/'
                ],
                'detection_patterns' => [
                    'phpinfo\(\)',
                    'Index of /',
                    'Apache/\d\.\d\.\d',
                    'error_reporting\(E_ALL\)'
                ],
                'false_positives' => [
                    'Custom error pages',
                    'Intentionally exposed version info'
                ],
                'required_tools' => 'nikto, nmap',
                'example_payloads' => [
                    "/phpinfo.php",
                    "/server-status",
                    "/.git/config",
                    "/.env"
                ]
            ]
        ];

        foreach ($vulnerabilities as $vulnerability) {
            VulnerabilityDefinition::create($vulnerability);
        }
    }
} 